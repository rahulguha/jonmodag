[{"content":"ржПржЗ рж╢рж╣рж░рзЗ рждрж┐ржирж┐ ржерж╛ржХрзЗржи┬аржмрзЬ рж░рж╛рж╕рзНрждрж╛ ржЫрж╛рзЬрж┐рзЯрзЗ ржЧрж▓рж┐ржШрзБржБржЬрж┐ ржкрзЗрж░рж┐рзЯрзЗ┬аржЬрзАрж░рзНржи ржЪрж╛рж░рждрж▓рж╛ рж╕рж░ржХрж╛рж░рж┐ ржЖржмрж╛рж╕ржирзЗ┬аржмрж╛рждрж╛рж╕рзЗрж░ ржЧрж╛рзЯрзЗ ржЧрж╛ рж▓рж╛ржЧрж┐рзЯрзЗ - рждрж┐ржирж┐ ржерж╛ржХрзЗржи\nрж╕ржХрж╛рж▓рзЗрж░ ржХрж╛ржЧржЬ ржЖрж╕рзЗ - ржЪрж╛ ржЬрж▓ржЦрж╛ржмрж╛рж░┬аржмрж╛ржЬрж╛рж░рзЗ ржЙржарждрж┐ ржкрзЛржирж╛ржорж╛ржЫ - ржХржЪрзБрж░ рж▓рждрж┐┬арж╣рж╛рждрзЗ рж╣рж╛рждрзЗ ржмржжрж▓ рж╣рзЯ рж╕рзНржмржкрзНржмрзЗрж░ рж░ржВ┬аржЖржХрж╛рж╢рзЗрж░ ржХрзНржпрж╛ржиржнрж╛рж╕рзЗ рждрж┐ржирж┐ ржЫржмрж┐ ржЖржБржХрзЗржи┬арж▓рж┐ржЦрзЗ рж░рж╛ржЦрзЗржи ржкрзНрж░ржЧрж╛рзЭ ржФржжрзНржзрждрзНржм ржЖрж░ ржЖржиржд ржнрж╛рж▓ржмрж╛рж╕рж╛┬аржПржХрж╛ржирзНрждрзЗ ржЙржЪрзНржЪрж╛рж░ржг ржХрж░рзЗржи рж╢рзИрж╢ржмрзЗрж░ ржХрзАрж░рзНрждржи ржЧрж╛ржи┬аржирж┐ржЬрзЗрж░ рж╕ржЩрзНржЧрзЗ ржЬржорзЗ ржУржарзЗ ржжрж╛рж░рзБржи ржЖрж╕рж░\nрждрж╛рж░ржкрж░┬арж░рж╛ржд ржмрж╛рзЬрж▓рзЗ ржШрзБржорж┐рзЯрзЗ ржкрзЬрзЗ ржЧрзГрж╣рж╕рзНржерж╛рж▓рж┐┬аржмрж╛рждрж╛рж╕рзЗ ржЫрзЬрж┐рзЯрзЗ ржпрж╛рзЯ ржирж┐ржГрж╢рж╛рж╕┬аржкрзЗржЬ ржерзНрж░рж┐ ржЬрзБрзЬрзЗ ржлрж┐рж░рж┐ рж╣рзЯ ржПржХрж╢ ржЖржЯ ржирзАрж▓ ржкржжрзНржо\nрждржмрзБ рж╕рзВрж░рзНржп ржЙржарж▓рзЗ рждрж┐ржирж┐ ржЙржарзЗ ржмрж╕рзЗржи┬аржмрж╛рждрж╛рж╕рзЗрж░ ржорж╛ржерж╛рзЯ рж╣рж╛ржд ржмрзБрж▓рж┐рзЯрзЗ ржжрзЗржи┬аржЧрж╛ржЫрзЗ ржЬрж▓ ржжрзЗржи -┬аржпрзЗ ржЖрж╕рзЗ рждрж╛ржХрзЗ ржЬрзЬрж┐рзЯрзЗ ржзрж░рзЗ┬аржЕржирзНржп ржЖрж╢рзНржЪрж░рзНржп рж╕ржорзЯрзЗрж░ ржЧрж▓рзНржк рж╢рзЛржирж╛ржи\n","permalink":"https://arkalim.org/jonmodag/kobi/","summary":"ржПржЗ рж╢рж╣рж░рзЗ рждрж┐ржирж┐ ржерж╛ржХрзЗржи┬аржмрзЬ рж░рж╛рж╕рзНрждрж╛ ржЫрж╛рзЬрж┐рзЯрзЗ ржЧрж▓рж┐ржШрзБржБржЬрж┐ ржкрзЗрж░рж┐рзЯрзЗ┬аржЬрзАрж░рзНржи ржЪрж╛рж░рждрж▓рж╛ рж╕рж░ржХрж╛рж░рж┐ ржЖржмрж╛рж╕ржирзЗ┬аржмрж╛рждрж╛рж╕рзЗрж░ ржЧрж╛рзЯрзЗ ржЧрж╛ рж▓рж╛ржЧрж┐рзЯрзЗ - рждрж┐ржирж┐ ржерж╛ржХрзЗржи\nрж╕ржХрж╛рж▓рзЗрж░ ржХрж╛ржЧржЬ ржЖрж╕рзЗ - ржЪрж╛ ржЬрж▓ржЦрж╛ржмрж╛рж░┬аржмрж╛ржЬрж╛рж░рзЗ ржЙржарждрж┐ ржкрзЛржирж╛ржорж╛ржЫ - ржХржЪрзБрж░ рж▓рждрж┐┬арж╣рж╛рждрзЗ рж╣рж╛рждрзЗ ржмржжрж▓ рж╣рзЯ рж╕рзНржмржкрзНржмрзЗрж░ рж░ржВ┬аржЖржХрж╛рж╢рзЗрж░ ржХрзНржпрж╛ржиржнрж╛рж╕рзЗ рждрж┐ржирж┐ ржЫржмрж┐ ржЖржБржХрзЗржи┬арж▓рж┐ржЦрзЗ рж░рж╛ржЦрзЗржи ржкрзНрж░ржЧрж╛рзЭ ржФржжрзНржзрждрзНржм ржЖрж░ ржЖржиржд ржнрж╛рж▓ржмрж╛рж╕рж╛┬аржПржХрж╛ржирзНрждрзЗ ржЙржЪрзНржЪрж╛рж░ржг ржХрж░рзЗржи рж╢рзИрж╢ржмрзЗрж░ ржХрзАрж░рзНрждржи ржЧрж╛ржи┬аржирж┐ржЬрзЗрж░ рж╕ржЩрзНржЧрзЗ ржЬржорзЗ ржУржарзЗ ржжрж╛рж░рзБржи ржЖрж╕рж░\nрждрж╛рж░ржкрж░┬арж░рж╛ржд ржмрж╛рзЬрж▓рзЗ ржШрзБржорж┐рзЯрзЗ ржкрзЬрзЗ ржЧрзГрж╣рж╕рзНржерж╛рж▓рж┐┬аржмрж╛рждрж╛рж╕рзЗ ржЫрзЬрж┐рзЯрзЗ ржпрж╛рзЯ ржирж┐ржГрж╢рж╛рж╕┬аржкрзЗржЬ ржерзНрж░рж┐ ржЬрзБрзЬрзЗ ржлрж┐рж░рж┐ рж╣рзЯ ржПржХрж╢ ржЖржЯ ржирзАрж▓ ржкржжрзНржо","title":"ржХржмрж┐"},{"content":"ржЖржорж╛ржХрзЗ рждрзБржорж┐ ржЕржирзЗржХ ржжрж┐рзЯрзЗржЫрзЛ\nржЬржирзНржорзЗрж░ рж╢рзЛржз ржирж┐рзЯрзЗ ржжрзЗржЧрзЗ ржжрж┐рзЯрзЗржЫрзЛ рж▓ржХрзНрж╖ ржорж╛ржирзБрж╖рзЗрж░ ржнрж┐ржЯрзЗ ржорж╛ржЯрж┐┬аржПржХ ржзрж╛ржХрзНржХрж╛рзЯ ржЫрж┐ржирзНржи рж╣рзЯрзЗржЫрзЗ ржорзВрж▓┬арж╣рж╛рж░рж┐рзЯрзЗржЫрзЗ ржкрж░рж┐ржЬржи -┬арж▓ржЬрзНржЬрж╛рзЯ ржмржирзНржзрзНржпрж╛ рж╣рзЯрзЗржЫрзЗ ржнрзВржорж┐\nрж╕рж╕рж╛ржЧрж░рж╛ ржжрж╢ржХ ржзрж░рзЗ ржЙржкрзБрзЬ ржХрж░рзЗржЫрзЛ ржЧрзНрж▓рж╛ржирж┐┬арж╢рж┐ржЦрж┐рзЯрзЗржЫрзЛ ржЕржкржорж╛ржиржмрзЛржз┬аржПржХржЯрзБ ржПржХржЯрзБ ржХрж░рзЗ рж╕рзЗржЪржи ржХрж░рзЗржЫрзЛ ржмрж┐рж╖┬аржЧрж▓рж┐ржкржерзЗ ржкрзНрж░рж╕ржм ржХрж░рзЗржЫ ржПржХ рж▓ржХрзНрж╖ рж╢рж╣рзАржжрзЗрж░ ржмрзЗржжрж┐\nржЖржорж╛ржХрзЗ рждрзБржорж┐ ржЕржирзЗржХ ржжрж┐рзЯрзЗржЫрзЛ┬арждрж╛ржЗ ржЖржорж┐ рждрзЛржорж╛рзЯ ржжрж┐рж▓рж╛ржо┬аржорзБржарзЛржнрж░рзНрждрж┐ рж╕рзНржмржкрзНржи ржЕржжржорзНржп ржЬрзЗржж┬аржЖрж░┬аржжрзБржЯрж┐ ржЪрж╛рж░рж╛ ржЧрж╛ржЫрзЗ рж╕рзНржмржпрждрзНржирзЗ рж▓рж╛рж▓рж┐ржд ржмрзБржирзЛржлрзБрж▓\n","permalink":"https://arkalim.org/jonmodag/deshbhag/","summary":"ржЖржорж╛ржХрзЗ рждрзБржорж┐ ржЕржирзЗржХ ржжрж┐рзЯрзЗржЫрзЛ\nржЬржирзНржорзЗрж░ рж╢рзЛржз ржирж┐рзЯрзЗ ржжрзЗржЧрзЗ ржжрж┐рзЯрзЗржЫрзЛ рж▓ржХрзНрж╖ ржорж╛ржирзБрж╖рзЗрж░ ржнрж┐ржЯрзЗ ржорж╛ржЯрж┐┬аржПржХ ржзрж╛ржХрзНржХрж╛рзЯ ржЫрж┐ржирзНржи рж╣рзЯрзЗржЫрзЗ ржорзВрж▓┬арж╣рж╛рж░рж┐рзЯрзЗржЫрзЗ ржкрж░рж┐ржЬржи -┬арж▓ржЬрзНржЬрж╛рзЯ ржмржирзНржзрзНржпрж╛ рж╣рзЯрзЗржЫрзЗ ржнрзВржорж┐\nрж╕рж╕рж╛ржЧрж░рж╛ ржжрж╢ржХ ржзрж░рзЗ ржЙржкрзБрзЬ ржХрж░рзЗржЫрзЛ ржЧрзНрж▓рж╛ржирж┐┬арж╢рж┐ржЦрж┐рзЯрзЗржЫрзЛ ржЕржкржорж╛ржиржмрзЛржз┬аржПржХржЯрзБ ржПржХржЯрзБ ржХрж░рзЗ рж╕рзЗржЪржи ржХрж░рзЗржЫрзЛ ржмрж┐рж╖┬аржЧрж▓рж┐ржкржерзЗ ржкрзНрж░рж╕ржм ржХрж░рзЗржЫ ржПржХ рж▓ржХрзНрж╖ рж╢рж╣рзАржжрзЗрж░ ржмрзЗржжрж┐\nржЖржорж╛ржХрзЗ рждрзБржорж┐ ржЕржирзЗржХ ржжрж┐рзЯрзЗржЫрзЛ┬арждрж╛ржЗ ржЖржорж┐ рждрзЛржорж╛рзЯ ржжрж┐рж▓рж╛ржо┬аржорзБржарзЛржнрж░рзНрждрж┐ рж╕рзНржмржкрзНржи ржЕржжржорзНржп ржЬрзЗржж┬аржЖрж░┬аржжрзБржЯрж┐ ржЪрж╛рж░рж╛ ржЧрж╛ржЫрзЗ рж╕рзНржмржпрждрзНржирзЗ рж▓рж╛рж▓рж┐ржд ржмрзБржирзЛржлрзБрж▓","title":"ржжрзЗрж╢ржнрж╛ржЧ ржжрж┐ржмрж╕ - рзирзжрззрзп┬а"},{"content":"Intro In my video about How I cleared the AWS SAA Certification Exam, I shared my preparation strategy as well as tips to ace the exam. I also gave a glimpse of my revision notes that I prepared while taking the course and practice exams on Udemy. After that video was out, I got so many comments and DMs, requesting me to share my notes, but the problem was that I took these notes using a note-taking app called Obsidian which stores them in markdown format locally on my Mac. Once I\u0026rsquo;m done editing my notes, I push them to a GitHub repository to make sure I don\u0026rsquo;t lose them if my laptop breaks.\nSo, if you want to view my notes exactly like I do, you can clone my Obsidian Vault repository and download Obsidian to render it. But, this solution isn\u0026rsquo;t elegant as it would require you to download an additional software. So, I along with my college roommate, Sarthak Narayan, had been working over the past 2 weeks on the project, Obsidian Publish using GitHub Action, which would allow us to effortlessly publish our notes as a static website.\nIt is complete and I\u0026rsquo;ve used it to publish my notes at notes.arkalim.org. Working The GitHub Action spins up a Docker container which parses and converts Obsidian markdown notes into a special markdown format understood by MkDocs, an open-source static site generator. MkDocs is actually meant for preparing documentations but works well for notes too. After the markdown files have been converted, all the images in my notes are compressed to a fraction of their original size so that they can load quickly in your web browser. A static site is then built using MkDocs and then finally deployed on Netlify. All of this happens automatically using GitHub Actions. All I have to do is update my notes and push the changes to GitHub.\nFinal thoughts Having an automated way to publish your notes online with the community is a powerful way to share knowledge. This project has also made it exceedingly easy for me to refer my notes from anywhere, which is powerful when you work on a lot of systems.\nResources My Notes Obsidian Publish - GitHub Action Parser and Image Compressor MkDocs - Material Theme ","permalink":"https://arkalim.org/rifka/obsidian-publish-github-action/","summary":"Intro In my video about How I cleared the AWS SAA Certification Exam, I shared my preparation strategy as well as tips to ace the exam. I also gave a glimpse of my revision notes that I prepared while taking the course and practice exams on Udemy. After that video was out, I got so many comments and DMs, requesting me to share my notes, but the problem was that I took these notes using a note-taking app called Obsidian which stores them in markdown format locally on my Mac.","title":"Obsidian Publish using GitHub Action"},{"content":"ЁЯФЧ GitHub Description I like reading personal improvement and mindset change type books on Kindle e-reader. Some of these books are downloaded straight from the internet and not from the Kindle store. I take highlights during my reading which I wanted to sync to my Notion workspace. There was no existing app that could do this job, so I developed my own.\nKindle exports the highlights as a file named MyClippings.txt. The NodeJS application reads the MyClipping.txt file exported by Kindle, parses it using Regex, extracts all the highlights, book names, highlight time etc and creates a JSON. It then uses Notion API to sync these highlights to a database in my Notion workspace. The app maintains a cache (JSON) containing the number of highlights synced for each book. This allows the highlights to be synced incrementally, preventing re-syncing of old highlights.\nAfter the app was received well by the open-source community and other developers contributed to improve the app, I dockerized it to make shipping the app easier. Now, the users donтАЩt have to install any dependency. They can just use the docker run command with the path to their clippings file along with their Notion API key and database ID. This would sync their highlights to their Notion database.\nAs a part of automation, I implemented auto build and deployment of containers on push to the master branch using GitHub Actions. If a developer raises a pull request and I merge it to the master branch, the GitHub workflow automatically builds the app and deploys it to GitHub packages repository.\n","permalink":"https://arkalim.org/rifka/kindle-to-notion/","summary":"ЁЯФЧ GitHub Description I like reading personal improvement and mindset change type books on Kindle e-reader. Some of these books are downloaded straight from the internet and not from the Kindle store. I take highlights during my reading which I wanted to sync to my Notion workspace. There was no existing app that could do this job, so I developed my own.\nKindle exports the highlights as a file named MyClippings.","title":"Kindle to Notion"},{"content":"ЁЯФЧ Colab Notebook Description In this project, I implemented the paper Show, Attend and Tell: Neural Image Caption Generation with Visual Attention. The neural network, a combination of CNN and LSTM, was trained on the MS COCO dataset and it learns to generate captions from images.\nAs the network generates the caption, word by word, the modelтАЩs gaze (attention) shifts across the image. This allows it to focus on those parts of the image which is more relevant for the next word to be generated. Furthermore, beam search is used during inference to enhance the prediction result. The network was trained in PyTorch on an Nvidia GTX 1060 graphics card for over 80 epochs.\n","permalink":"https://arkalim.org/rifka/automated-image-captioning/","summary":"ЁЯФЧ Colab Notebook Description In this project, I implemented the paper Show, Attend and Tell: Neural Image Caption Generation with Visual Attention. The neural network, a combination of CNN and LSTM, was trained on the MS COCO dataset and it learns to generate captions from images.\nAs the network generates the caption, word by word, the modelтАЩs gaze (attention) shifts across the image. This allows it to focus on those parts of the image which is more relevant for the next word to be generated.","title":"Automated Image Captioning (Bachelor Thesis)"},{"content":"ЁЯФЧ View App ЁЯФЧ GitHub Description A to-do list web application built using React that allows the user to add, remove and edit their todos. Todo lists are stored in the browser local storage. I built this app while learning React.\n","permalink":"https://arkalim.org/rifka/todo-list-app/","summary":"ЁЯФЧ View App ЁЯФЧ GitHub Description A to-do list web application built using React that allows the user to add, remove and edit their todos. Todo lists are stored in the browser local storage. I built this app while learning React.","title":"Todo List App"},{"content":"ЁЯФЧ Colab Notebook ЁЯФЧ Blog Post Description In this project, I trained a neural network to localize key points on faces. Resnet-18 was used as the model with some slight modifications to the input and output layer. The model was trained on the official DLib Dataset containing 6666 images along with corresponding 68-point landmarks for each face. Additionally, I wrote a custom data preprocessing pipeline in PyTorch to increase variance in the input images to help the model generalize better. The neural network was trained for 30 epochs before it reached the optima.\nDuring inference, OpenCV Harr Cascades are used to detect faces in the input images. Detected faces are then cropped, resized to (224, 224), and fed to our trained neural network to predict landmarks in them. The predicted landmarks in the cropped faces are then overlayed on top of the original image.\n","permalink":"https://arkalim.org/rifka/face-landmarks-detection/","summary":"ЁЯФЧ Colab Notebook ЁЯФЧ Blog Post Description In this project, I trained a neural network to localize key points on faces. Resnet-18 was used as the model with some slight modifications to the input and output layer. The model was trained on the official DLib Dataset containing 6666 images along with corresponding 68-point landmarks for each face. Additionally, I wrote a custom data preprocessing pipeline in PyTorch to increase variance in the input images to help the model generalize better.","title":"Face Landmarks Detection using CNN"},{"content":"Description The aim of the project was to build goggles which could find where the user was looking (gaze), the category of object the user was looking at, and the duration of attention on that object. The goggles had 3 camera modules, one on each eye to track the pupil movement and the third one for mapping the gaze to the real world. Thresholding was used to detect the pupils and contours were used to find its centre. Various important parameters such as pupil velocity, acceleration, and fixation time were calculated for further statistical analysis. Single Shot Descriptor, with VGG16 as backbone, was used to detect the objects the user was gazing at. Additionally, a GUI was made using TkInter for ease of use.\n","permalink":"https://arkalim.org/rifka/gaze-tracking-goggles/","summary":"Description The aim of the project was to build goggles which could find where the user was looking (gaze), the category of object the user was looking at, and the duration of attention on that object. The goggles had 3 camera modules, one on each eye to track the pupil movement and the third one for mapping the gaze to the real world. Thresholding was used to detect the pupils and contours were used to find its centre.","title":"Gaze-tracking Goggles"},{"content":"ЁЯФЧ GitHub Description The aim of the project is to build an open-source quadcopter platform for research in the field of drone autonomy. Various deep learning and computer vision algorithms will be implemented on the drone including person tracking, gesture control using human pose estimation, optical flow stabilization, obstacle avoidance, and depth estimation using monocular vision. The drone uses a Pixhawk flight controller with Raspberry Pi as a companion computer. DJI Flame Wheel-450 is used for the quadcopter frame along with some custom mountings for adding additional components.\nRaspberry Pi runs a ROS node which communicates with another ROS node running on the host PC to transfer videos over Wi-Fi. To make the project open-source, easy to develop, and easily reproducible, the simulation environment setup has been dockerized using docker container. We are currently developing the algorithms and testing them in Gazebo Simulation.\n","permalink":"https://arkalim.org/rifka/openquad/","summary":"ЁЯФЧ GitHub Description The aim of the project is to build an open-source quadcopter platform for research in the field of drone autonomy. Various deep learning and computer vision algorithms will be implemented on the drone including person tracking, gesture control using human pose estimation, optical flow stabilization, obstacle avoidance, and depth estimation using monocular vision. The drone uses a Pixhawk flight controller with Raspberry Pi as a companion computer. DJI Flame Wheel-450 is used for the quadcopter frame along with some custom mountings for adding additional components.","title":"OpenQuad"},{"content":" Presented in the 4th International and 19th National Conference on Machine and Mechanisms (iNaCoMM 2019)\nPublished in the Springer 2019\nЁЯФЧ Publication Description Natural disasters like earthquakes and landslides are sudden events that cause widespread destruction and major collateral damage including loss of life. Though disasters can never be prevented, their effects on mankind can surely be reduced. In this paper, we present the design and control of SRR (Search and Reconnaissance Robot), a robot capable of traversing on all terrains and locating survivors stuck under the debris. This will assist the rescue team to focus on recovering the victims, leaving the locating task for the Robots. The unique features of the SRR above existing ATVs are active-articulation, modularity, and assisted-autonomy. Active-articulation allows the SRR to climb objects much tall than itself. Modularity allows the SRR to detach into smaller modules to enter tight spaces where the whole body canтАЩt fit. Assisted-autonomy allows the SRR to detect the presence of objects in front and climb autonomously over them.\n","permalink":"https://arkalim.org/rifka/search-and-reconnaissance-robot/","summary":"Presented in the 4th International and 19th National Conference on Machine and Mechanisms (iNaCoMM 2019)\nPublished in the Springer 2019\nЁЯФЧ Publication Description Natural disasters like earthquakes and landslides are sudden events that cause widespread destruction and major collateral damage including loss of life. Though disasters can never be prevented, their effects on mankind can surely be reduced. In this paper, we present the design and control of SRR (Search and Reconnaissance Robot), a robot capable of traversing on all terrains and locating survivors stuck under the debris.","title":"Search and Reconnaissance Robot"},{"content":"Description I worked on this project single-handedly during the summer break following my freshman year at NIT- Trichy. SEBART-Pro is a robot that follows a ball while balancing on two wheels. It can also recognize traffic signs and act accordingly. It has two stepper motors for precise position control and used an Arduino Nano as the microcontroller. The robot senses the tilt using an MPU-6050 (6-axis gyroscope and accelerometer) and converts the values from these sensors into angles using a Kalman Filter. It uses the PID control algorithm to balance on two wheels and a simple Convolutional Neural Network is used to recognize traffic signs.\n","permalink":"https://arkalim.org/rifka/sebart-pro/","summary":"Description I worked on this project single-handedly during the summer break following my freshman year at NIT- Trichy. SEBART-Pro is a robot that follows a ball while balancing on two wheels. It can also recognize traffic signs and act accordingly. It has two stepper motors for precise position control and used an Arduino Nano as the microcontroller. The robot senses the tilt using an MPU-6050 (6-axis gyroscope and accelerometer) and converts the values from these sensors into angles using a Kalman Filter.","title":"SEBART-Pro"},{"content":"TBD\n","permalink":"https://arkalim.org/sadalap/sadalap/","summary":"TBD","title":""}]